# -*- coding: utf-8 -*-
"""LR2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zqH698uVVv4MimcZgLvYwgNLVDYHuaXL
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

img1 = cv2.imread("dogs2.jpeg", cv2.IMREAD_GRAYSCALE)
img1_ = cv2.rotate(img1[900:1400, 900:1400], cv2.ROTATE_90_CLOCKWISE)

img1_

def cv_bf_matcher(image: np.ndarray, query: np.ndarray, n_matches: int = 10) -> np.ndarray:
    akaze = cv2.AKAZE_create()

    kp1, des1 = akaze.detectAndCompute(image, None)
    kp2, des2 = akaze.detectAndCompute(query, None)

    bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)

    matches = bf.match(des1, des2)
    matches = sorted(matches, key=lambda x: x.distance)

    img_matches = cv2.drawMatches(image, kp1, query, kp2, matches[:n_matches], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
    return img_matches

def custom_matcher(
        image: np.ndarray,
        query: np.ndarray,
        threshold: float = 0.5,
        n_matches: int = 10
    ) -> np.ndarray:
    akaze = cv2.AKAZE_create()

    kp1, des1 = akaze.detectAndCompute(image, None)
    kp2, des2 = akaze.detectAndCompute(query, None)

    matches = []
    for i, d1 in enumerate(des1):
        distances = np.linalg.norm(d1-des2, axis=1)
        min_idx = np.argmin(distances)
        min_dist = distances[min_idx]
        if min_dist < threshold:
            matches.append(cv2.DMatch(i, min_idx, min_dist))

    matches = sorted(matches, key=lambda x: x.distance)
    img_matches = cv2.drawMatches(image, kp1, query, kp2, matches[:n_matches], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
    # img_matches = cv2.cvtColor(img_matches, cv2.COLOR_BGR2RGB)
    return img_matches

def show_matches(matches: np.ndarray) -> None:
    plt.figure(figsize=(16, 10))
    plt.imshow(matches)
    plt.axis("off")
    plt.show()

cv_matches = cv_bf_matcher(img1, img1_, 10)
show_matches(cv_matches)

custom_matches = custom_matcher(img1, img1_)
show_matches(custom_matches)

img2 = cv2.imread("woods4k.jpeg", cv2.IMREAD_GRAYSCALE)
img2_ = img2[800:1200, 800:1200]

cv_matches_2 = cv_bf_matcher(img2, img2_)
show_matches(cv_matches_2)

custom_matches_2 = custom_matcher(img2, img2_)
show_matches(custom_matches_2)
