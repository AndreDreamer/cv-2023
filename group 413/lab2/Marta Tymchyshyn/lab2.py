# -*- coding: utf-8 -*-
"""CV_lab2_Tymchyshyn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FONr_TJexAqnMtU0KKBgh7IujmStmhAN

Lab2
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2

lowcontrast = cv2.imread('lowcontrast.jpeg',  cv2.IMREAD_COLOR)

plt.imshow(lowcontrast)
plt.title('lowcontrast') 
plt.axis('off')
plt.show()

highcontrast = cv2.imread('highcontrast.jfif',  cv2.IMREAD_COLOR)

plt.imshow(highcontrast)
plt.show()

lowcontrast = cv2.cvtColor(lowcontrast, cv2.COLOR_BGR2GRAY)
highcontrast = cv2.cvtColor(highcontrast, cv2.COLOR_BGR2GRAY)

plt.imshow(lowcontrast, cmap='gray', vmin=0, vmax=255)
plt.show()

plt.imshow(highcontrast, cmap='gray', vmin=0, vmax=255)
plt.show()

lowcontrast_part = lowcontrast.copy()
lowcontrast_part = lowcontrast_part[150:400, 100:550]
num_rows, num_cols = lowcontrast_part.shape[:2]
lowcontrast_part = cv2.warpAffine(lowcontrast_part, cv2.getRotationMatrix2D((num_cols/2, num_rows/2), -15, 1), (num_cols, num_rows))

highcontrast_part = highcontrast.copy()
highcontrast_part = highcontrast_part[100:450, 200:650]

plt.imshow(lowcontrast_part, cmap='gray', vmin=0, vmax=255)
plt.show()
plt.imshow(highcontrast_part, cmap='gray', vmin=0, vmax=255)
plt.show()

def dist(v1, v2):
  # euclidean dist
  dist = np.sqrt(sum((np.array(v1) - np.array(v2)) ** 2))
  return dist

print(np.array([1,3,4]) - np.array([5,6,7]))

def fastDetector(img1, img2):
    fast = cv2.FastFeatureDetector_create()

    print("Threshold: ", fast.getThreshold)
    print("nonmaxSuppression: ", fast.getNonmaxSuppression())
    print("neighborhood: ", fast.getType())

    kp1 = fast.detect(img1, None)
    kp2 = fast.detect(img2, None)

    return kp1, kp2

kp_1, kp_2 = fastDetector(highcontrast, highcontrast_part)

kp_1

def briefDescriptor(img1, img2, kp1, kp2):
    brief = cv2.xfeatures2d.BriefDescriptorExtractor_create()

    kp1, des1 = brief.compute(img1, kp1)
    kp2, des2 = brief.compute(img2, kp2)
    
    return des1, kp1, des2, kp2

def knn_matcher(img1: np.array, img2: np.array, k: int = 2, ratio: float = 0.75):

    kp1, kp2 = fastDetector(img1, img2)
    des1, kp1, des2, kp2 = briefDescriptor(img1, img2, kp1, kp2)


    matches = []


    for idx1, point1 in enumerate(des1):
        distances = []
        for idx, point2 in enumerate(des2):
          distances.append((idx, dist(point1, point2)))

        kMatches = sorted(distances, key=lambda x: x[1])[:k]

        closest1, closest2 = kMatches[:2]
        print(closest1)


        if closest1[1] < ratio * closest2[1]:
            idx2, minD = closest1
            matches.append(cv2.DMatch(_imgIdx=0, _queryIdx=idx1, _trainIdx=idx2, _distance=minD))

    return matches, kp1, kp2

matches, kp1, kp2 = knn_matcher(lowcontrast, lowcontrast_part)

img1 = cv2.drawMatches(lowcontrast, kp1, lowcontrast_part, kp2, matches[::3], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
plt.figure(figsize=(18, 10))
plt.imshow(img1, cmap=plt.get_cmap('Greys'))
plt.show()

matches, kp1, kp2 = knn_matcher(highcontrast, highcontrast_part)

img2 = cv2.drawMatches(highcontrast, kp1, highcontrast_part, kp2, matches[::20], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
plt.figure(figsize=(18, 10))
plt.imshow(img2, cmap=plt.get_cmap('Greys'))
plt.show()
